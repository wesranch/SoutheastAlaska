#libraries
library("tidyverse")
library("rFIA")
library("nls2")
library("minpack.lm")
library("sf")
#function to fit the weibull distribution curve to binned data using NLS
fit_weibull <- function(dat, lower = c(-Inf, -Inf, 0, 0), upper = c(Inf, Inf, Inf, 10), use_c_d = "both") {
#you might have to play with these starting values
pars <- expand.grid(a=seq(0.1,10, len=50), #shape
b=seq(0.1, 20, len=10), #scale
c = 0, #threshold parameter; this sets the "floor" for the curve,
# the y-intercept for shape parameter > 1
# or asymptote for low values of shape parameters
d=seq(0.1, 20, len = 20) #removed d parameter, which scales everything vertically
#it does allow better fit but harder to converge
)
# a floor could be set by replacing c with a constant, rather than
# estimating it, though this could cause issues with convergence.
# first round to get approximate starting values
if(use_c_d == "both") formula <- prop_present ~ (((a/b) * ((lai/b)^(a-1)) * exp(- (lai/b)^a)) + c) * d
if(use_c_d == "c"){
formula <- prop_present ~ (((a/b) * ((lai/b)^(a-1)) * exp(- (lai/b)^a)) + c)
pars <- pars[,c(1:3)]
lower = lower[c(1:3)]
upper = upper[c(1:3)]
}
if(use_c_d == "d") {
formula <- prop_present ~ (((a/b) * ((lai/b)^(a-1)) * exp(- (lai/b)^a))) * d
pars <- pars[,c(1,2,4)]
lower = lower[c(1,2,4)]
upper = upper[c(1,2,4)]
}
if(use_c_d == "neither"){
formula <- prop_present ~ (((a/b) * ((lai/b)^(a-1)) * exp(- (lai/b)^a)))
pars <- pars[,c(1,2)]
lower = lower[c(1,2)]
upper = upper[c(1,2)]
}
res <- nls2(formula,
data=dat,
start=pars,
algorithm='brute-force',
upper = upper,
lower = lower,
weights = dat$n_plots_bin)
#get better estimates using minpack
res1 <- nlsLM(formula,
data=dat,
start=as.list(coef(res)),
upper = upper,
lower = lower,
weights = dat$n_plots_bin)
#sometimes c will be negative, which would allow seedlings to sometimes be negative.
#If that happens, refit the model with c = 0
if(use_c_d %in% c("both", "c") & coef(res1)[3] < 0) {
res1 <- nlsLM(prop_present ~ ((a/b) * ((lai/b)^(a-1)) * exp(- (lai/b)^a)),
data=dat,
start=as.list(coef(res)[c(1,2)]))
}
return(res1)
}
#options
options(scipen = 999)
#should we restrict our analysis to plots that are near seedlings, near adult trees, or unrestricted?
#this is by far the slowest part of the script
range_method <- "seedling" #"seedling" or "adult"; other options skip this step and use all the data from the chosen states
#range buffer size -- how many meters can plots be from seedlings to count in the calculation?
range_buffer <- 10000
#should maximum suitability be set to 1 and everything scaled to match? This will (almost?)
# always increase total suitable light levels and thus regeneration
scale_max_p <- TRUE
#should the area under the curve be set to 1 for all species? This will cancel out
# differences in abundance/fecundity among species. Probably not recommended if you hae
# a lot of range-restricted species, unless you're using the range_method option above.
# But this is very much recommended if you're wanting to fit a true Weibull PDF where AUC = 1
# (i.e. using use_c_d == "neither")
set_auc_to_1 <- FALSE
#what formula should we use? See above equation fit_weibull. For a regular Weibull PDF,
# set use_c_d = "neither", to only use the shape and scale parameters. Otherwise,
# you can use the c parameter to translate the whole curve up or the d parameter to stretch the
# whole curve. This gives more flexibility in the kinds of shapes that can be fit,
# and allows for the area under the curve to be greater than 1.
use_c_d <- "d"
#what states should we use for the analysis?
states <- "AK"
#this script uses the rFIA package to access the tables needed
tables <- c("TREE","SEEDLING","PLOT", "COND", "SITETREE")
directory <- "F:/SoutheastAlaska/landis/scripts/LAI establishment from FIA data/example_data/"
#species reference data
sp_ref <- read.csv(paste0(directory, "REF_SPECIES.csv"))
#import fia data
#using rFIA package automatically knits the tables together; you could also
# use readr::read_csv() or import several csvs then rbind()
fia <- readFIA(dir = directory,
tables = tables,
states = states)
#what states should we use for the analysis?
states <- c("AK")
#import fia data
#using rFIA package automatically knits the tables together; you could also
# use readr::read_csv() or import several csvs then rbind()
fia <- readFIA(dir = directory,
tables = tables,
states = states)
#import fia data
#using rFIA package automatically knits the tables together; you could also
# use readr::read_csv() or import several csvs then rbind()
fia <- readFIA(dir = directory,
tables = tables,
states = 'AK')
#import fia data
#using rFIA package automatically knits the tables together; you could also
# use readr::read_csv() or import several csvs then rbind()
fia <- readFIA(dir = directory,
tables = tables,
states = 'ALASKA')
#import fia data
#using rFIA package automatically knits the tables together; you could also
# use readr::read_csv() or import several csvs then rbind()
fia <- readFIA(dir = directory,
tables = tables,
states = 'AL')
#import fia data
#using rFIA package automatically knits the tables together; you could also
# use readr::read_csv() or import several csvs then rbind()
fia <- readFIA(dir = directory,
tables = tables,
states = 'AK')
#import fia data
#using rFIA package automatically knits the tables together; you could also
# use readr::read_csv() or import several csvs then rbind()
fia <- getFIA(dir = directory,
tables = tables,
states = 'AK')
trees <- fia$TREE
plot <- fia$PLOT
cond <- fia$COND
seedlings <- fia$SEEDLING
sitetrees <- fia$SITETREE
rm(fia)
gc()
cond_to_use <- cond %>%
filter(!(DSTRBCD1 %in% c(30,31,32,46,53,54,80)),
!(DSTRBCD2 %in% c(30,31,32,46,53,54,80)),
!(DSTRBCD3 %in% c(30,31,32,46,53,54,80)),
TRTCD1 == 0 | is.na(TRTCD1),
TRTCD2 == 0 | is.na(TRTCD2),
TRTCD3 == 0 | is.na(TRTCD3)) %>%
mutate(IS_FOREST = ifelse(FORTYPCD %in%(c(1:998)), 1, 0)) %>%
group_by(PLT_CN) %>%
summarise(total_cond = sum(CONDPROP_UNADJ),
natural = sum(STDORGCD, na.rm = TRUE),
treatment = sum(TRTCD1, na.rm = TRUE),
proportion_forest = sum(CONDPROP_UNADJ * IS_FOREST)) %>%
filter(total_cond > 0.95,
proportion_forest > 0.95)
plots_to_use <- plot %>%
filter(PLOT_STATUS_CD == 1) %>%
left_join(cond_to_use, by = c("CN" = "PLT_CN")) %>%
dplyr::select(CN, proportion_forest)
func_table <- read.csv("./NECN_Functional_Table_inv_moisture.csv")
func_table <- read.csv("example_data/NECN_Functional_Table_inv_moisture.csv")
sp_table <- read.csv("example_data/NECN_Spp_Table_inv_necn7.csv") %>%
left_join(func_table, by = "FunctionalGroupIndex")
sp_table
library(terra)
#april sim LAI
LAI_yr5_april <- rast("F:/Rancher_Sims_Full_Landscape/FinalSimulationsThesis/TestRuns/interior_hist_ncar_04162025_GrowthOnly/DGS/LAI-5.img")
LAI_yr5_december <- rast("F:/Rancher_Sims_Full_Landscape/interior_hist_ncar_12.2.2024/DGS/LAI-5.img")
plot(LAI_yr5_april)
plot(flip(LAI_yr5_april, direction = "vertical"))
plot(flip(LAI_yr5_december, direction = "vertical"))
#bounds
bounds <- vect("F:/randomForest_Landis/input/shp/FullLandscapeV3_082722.shp")
LAI_april <- mask(LAI_yr5_april, bounds)
LAI_dec <- mask(LAI_yr5_december, bounds)
plot(flip(LAI_april, direction = "vertical"))
april_flipped <- flip(LAI_april, direction = "vertical")
december_flipped <- flip(LAI_yr5_december, direction = "vertical")
LAI_april <- mask(april_flipped, bounds)
LAI_dec <- mask(december_flipped, bounds)
LAI_april <- crop(april_flipped, bounds)
LAI_april <- mask(april_flipped, bounds)
plot(LAI_april)
april_projected <- project(april_flipped, "EPSG:3338")
crs(april_flipped)
april_projected <- project(april_flipped, 'EPSG:3338')
april_projected <- project(LAI_yr5_april, 'EPSG:3338')
crs(april_flipped) <- "EPSG:3338"
crs(december_flipped) <- "EPSG:3338"
LAI_april <- mask(april_flipped, bounds)
LAI_dec <- mask(december_flipped, bounds)
plot(LAI_april)
# LAI
LAI_yr5_april <- rast("F:/Rancher_Sims_Full_Landscape/FinalSimulationsThesis/TestRuns/interior_hist_ncar_04162025_GrowthOnly/DGS/LAI-5.img")
LAI_yr5_december <- rast("F:/Rancher_Sims_Full_Landscape/interior_hist_ncar_12.2.2024/DGS/LAI-5.img")
april_flipped <- flip(LAI_april, direction = "vertical")
december_flipped <- flip(LAI_yr5_december, direction = "vertical")
ext(april_flipped)<- ext(bounds)
ext(december_flipped)<-ext(bounds)
crs(april_flipped) <- "EPSG:3338"
crs(december_flipped) <- "EPSG:3338"
LAI_april <- mask(april_flipped, bounds)
LAI_dec <- mask(december_flipped, bounds)
plot(LAI_april)
plot(LAI_dec)
april_flipped <- flip(LAI_yr5_april, direction = "vertical")
# LAI
LAI_yr5_april <- rast("F:/Rancher_Sims_Full_Landscape/FinalSimulationsThesis/TestRuns/interior_hist_ncar_04162025_GrowthOnly/DGS/LAI-5.img")
april_flipped <- flip(LAI_yr5_april, direction = "vertical")
#bounds
bounds <- vect("F:/randomForest_Landis/input/shp/FullLandscapeV3_082722.shp")
# LAI
LAI_yr5_april <- rast("F:/Rancher_Sims_Full_Landscape/FinalSimulationsThesis/TestRuns/interior_hist_ncar_04162025_GrowthOnly/DGS/LAI-5.img")
LAI_yr5_december <- rast("F:/Rancher_Sims_Full_Landscape/interior_hist_ncar_12.2.2024/DGS/LAI-5.img")
april_flipped <- flip(LAI_yr5_april, direction = "vertical")
december_flipped <- flip(LAI_yr5_december, direction = "vertical")
ext(april_flipped)<- ext(bounds)
ext(december_flipped)<-ext(bounds)
crs(april_flipped) <- "EPSG:3338"
crs(december_flipped) <- "EPSG:3338"
LAI_april <- mask(april_flipped, bounds)
LAI_dec <- mask(december_flipped, bounds)
plot(LAI_april)
plot(LAI_dec)
plot(LAI_april, main = "LAI April Sim")
plot(LAI_dec, main = "LAI December Sim")
april_average <- mean(values(LAI_april), na.rm = T)
april_average
december_average <- mean(values(LAI_dec), na.rm = T)
december_average
april_sd <- sd(values(LAI_april), na.rm = T)
december_sd <- sd(values(LAI_dec), na.rm = T)
april_sd
december_sd
print(paste0("average LAI yr 5 (April Sim): "), april_average)
print(paste0("average LAI yr 5 (April Sim): ", april_average))
print(paste0("SD LAI yr 5 (April Sim): ", april_sd))
print(paste0("average LAI yr 5 (December Sim): ", december_average))
print(paste0("SD LAI yr 5 (December Sim): ", december_sd))
options(scipen=999)
print(paste0("average LAI yr 5 (April Sim): ", april_average))
###############################
# Available Water
AW_yr5_april <- rast("F:/Rancher_Sims_Full_Landscape/FinalSimulationsThesis/TestRuns/interior_hist_ncar_04162025_GrowthOnly/DGS/AvailableWater-5.img")
AW_yr5_december <- rast("F:/Rancher_Sims_Full_Landscape/interior_hist_ncar_12.2.2024/DGS/AvailableWater-5.img")
AWapril_flipped <- flip(AW_yr5_april, direction = "vertical")
AWdecember_flipped <- flip(AW_yr5_december, direction = "vertical")
ext(AWapril_flipped)<- ext(bounds)
ext(AWdecember_flipped)<-ext(bounds)
crs(AWapril_flipped) <- "EPSG:3338"
crs(AWdecember_flipped) <- "EPSG:3338"
AW_april <- mask(AWapril_flipped, bounds)
AW_dec <- mask(AWdecember_flipped, bounds)
plot(AW_april, main = "AW April Sim")
plot(AW_dec, main = "Aw December Sim")
april_average <- mean(values(AW_april), na.rm = T)
december_average <- mean(values(AW_dec), na.rm = T)
april_sd <- sd(values(AW_april), na.rm = T)
december_sd <- sd(values(AW_dec), na.rm = T)
april_average
plot(AW_yr5_april)
# LAI
LAI_yr5_april <- rast("F:/Rancher_Sims_Full_Landscape/FinalSimulationsThesis/TestRuns/interior_hist_ncar_04162025_GrowthOnly/DGS/LAI-1.img")
LAI_yr5_december <- rast("F:/Rancher_Sims_Full_Landscape/interior_hist_ncar_12.2.2024/DGS/LAI-1.img")
april_flipped <- flip(LAI_yr5_april, direction = "vertical")
december_flipped <- flip(LAI_yr5_december, direction = "vertical")
ext(april_flipped)<- ext(bounds)
ext(december_flipped)<-ext(bounds)
crs(april_flipped) <- "EPSG:3338"
crs(december_flipped) <- "EPSG:3338"
LAI_april <- mask(april_flipped, bounds)
LAI_dec <- mask(december_flipped, bounds)
plot(LAI_april, main = "LAI April Sim")
plot(LAI_dec, main = "LAI December Sim")
april_average <- mean(values(LAI_april), na.rm = T)
december_average <- mean(values(LAI_dec), na.rm = T)
april_sd <- sd(values(LAI_april), na.rm = T)
december_sd <- sd(values(LAI_dec), na.rm = T)
print(paste0("average LAI yr 5 (April Sim): ", april_average))
print(paste0("SD LAI yr 5 (April Sim): ", april_sd))
print(paste0("average LAI yr 5 (December Sim): ", december_average))
print(paste0("SD LAI yr 5 (December Sim): ", december_sd))
